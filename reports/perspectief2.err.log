Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

emissions_df = pd.read_csv('Emissions_Agriculture_Energy_E_All_Data.csv', encoding='latin1')
production_df = pd.read_csv('Production_Crops_Livestock_E_All_Data.csv', encoding='latin1', low_memory=False)
gdp_df = pd.read_csv('gdp-per-capita-worldbank.csv')
co2_df = pd.read_csv('owid-co2-data.csv')

emissions_filtered = emissions_df[
    (emissions_df["Item"] == "Total Energy") &
    (emissions_df["Element"] == "Emissions (CO2)") &
    (emissions_df["Unit"] == "kt")
]
emissions_2021 = emissions_filtered[["Area", "Y2021"]].copy()
emissions_2021.columns = ["Land", "CO2_uitstoot_kt"]
emissions_2021["CO2_uitstoot_kt"] = pd.to_numeric(emissions_2021["CO2_uitstoot_kt"], errors='coerce')

production_filtered = production_df[
    (production_df["Element"] == "Production") &
    (production_df["Unit"] == "t")
]
production_2021 = production_filtered.groupby("Area")["Y2021"].sum().reset_index()
production_2021.columns = ["Land", "Totale_productie_ton"]
production_2021["Totale_productie_ton"] = pd.to_numeric(production_2021["Totale_productie_ton"], errors='coerce')

gdp_2021 = gdp_df[gdp_df["Year"] == 2021][["Entity", "GDP per capita, PPP (constant 2021 international $)"]]
gdp_2021.columns = ["Land", "BBP_per_hoofd"]
gdp_2021["BBP_per_hoofd"] = pd.to_numeric(gdp_2021["BBP_per_hoofd"], errors="coerce")

pop_2021 = co2_df[co2_df["year"] == 2021][["country", "population"]].copy()
pop_2021.columns = ["Land", "Bevolking"]
pop_2021["Bevolking"] = pd.to_numeric(pop_2021["Bevolking"], errors="coerce")

df = pd.merge(emissions_2021, production_2021, on="Land")
df["CO2_per_ton"] = df["CO2_uitstoot_kt"] * 1000 / df["Totale_productie_ton"]
df = pd.merge(df, gdp_2021, on="Land")
df = pd.merge(df, pop_2021, on="Land")
df = df.dropna()

landen = {
    'Brazil': 'BraziliÃ«', 'India': 'India', 'Indonesia': 'IndonesiÃ«',
    'Japan': 'Japan', 'Nigeria': 'Nigeria', 'South Africa': 'Zuid-Afrika', 'United States': 'Verenigde Staten'
}
df_selected = df[df["Land"].isin(landen.keys())].copy()
df_selected["land_naam"] = df_selected["Land"].map(landen)

df_final = df_selected[[
    "land_naam", "BBP_per_hoofd", "CO2_per_ton", "Totale_productie_ton", "Bevolking"
]]
df_final.columns = ['land_naam', 'BBP_per_hoofd', 'CO2_per_ton', 'Productie_ton', 'Bevolking']

scaler = MinMaxScaler()
categorieÃ«n = ['BBP_per_hoofd', 'CO2_per_ton', 'Productie_ton', 'Bevolking']
df_schaal = df_final.copy()
df_schaal[categorieÃ«n] = scaler.fit_transform(df_schaal[categorieÃ«n])

kleuren = ['#AEC6CF', '#FFB347', '#77DD77', '#FF6961', '#CBAACB', '#FDFD96', '#B0E0E6']

def maak_radar_chart(df, categorieÃ«n, titel):
    df['totaal'] = df[categorieÃ«n].sum(axis=1)
    df_sorted = df.sort_values(by='totaal', ascending=False).reset_index(drop=True)

    N = len(categorieÃ«n)
    hoeken = [n / float(N) * 2 * np.pi for n in range(N)]
    hoeken += hoeken[:1]

    plt.figure(figsize=(8, 8))
    ax = plt.subplot(111, polar=True)

    plt.xticks(hoeken[:-1], categorieÃ«n, color='grey', size=12)
    ax.set_rlabel_position(30)
    plt.yticks([0.2, 0.4, 0.6, 0.8], ["0.2", "0.4", "0.6", "0.8"], color="grey", size=10)
    plt.ylim(0, 1)

    for i, row in df_sorted.iterrows():
        waarden = row[categorieÃ«n].values.flatten().tolist()
        waarden += waarden[:1]
        ax.fill(hoeken, waarden, alpha=0.5, color=kleuren[i % len(kleuren)], label=row['land_naam'])
        ax.plot(hoeken, waarden, color=kleuren[i % len(kleuren)], linewidth=1)

    plt.title(titel, size=15, y=1.1)
    plt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))
    plt.tight_layout()
    plt.show()

maak_radar_chart(df_schaal, categorieÃ«n, "Internationale vergelijking: BBP, uitstoot en landbouwproductie")

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[1], line 24[0m
[1;32m     18[0m emissions_2021[[38;5;124m"[39m[38;5;124mCO2_uitstoot_kt[39m[38;5;124m"[39m] [38;5;241m=[39m pd[38;5;241m.[39mto_numeric(emissions_2021[[38;5;124m"[39m[38;5;124mCO2_uitstoot_kt[39m[38;5;124m"[39m], errors[38;5;241m=[39m[38;5;124m'[39m[38;5;124mcoerce[39m[38;5;124m'[39m)
[1;32m     20[0m production_filtered [38;5;241m=[39m production_df[
[1;32m     21[0m     (production_df[[38;5;124m"[39m[38;5;124mElement[39m[38;5;124m"[39m] [38;5;241m==[39m [38;5;124m"[39m[38;5;124mProduction[39m[38;5;124m"[39m) [38;5;241m&[39m
[1;32m     22[0m     (production_df[[38;5;124m"[39m[38;5;124mUnit[39m[38;5;124m"[39m] [38;5;241m==[39m [38;5;124m"[39m[38;5;124mt[39m[38;5;124m"[39m)
[1;32m     23[0m ]
[0;32m---> 24[0m production_2021 [38;5;241m=[39m production_filtered[38;5;241m.[39mgroupby([38;5;124m"[39m[38;5;124mArea[39m[38;5;124m"[39m)[[38;5;124m"[39m[38;5;124mY2021[39m[38;5;124m"[39m][38;5;241m.[39msum()[38;5;241m.[39mreset_index()
[1;32m     25[0m production_2021[38;5;241m.[39mcolumns [38;5;241m=[39m [[38;5;124m"[39m[38;5;124mLand[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mTotale_productie_ton[39m[38;5;124m"[39m]
[1;32m     26[0m production_2021[[38;5;124m"[39m[38;5;124mTotale_productie_ton[39m[38;5;124m"[39m] [38;5;241m=[39m pd[38;5;241m.[39mto_numeric(production_2021[[38;5;124m"[39m[38;5;124mTotale_productie_ton[39m[38;5;124m"[39m], errors[38;5;241m=[39m[38;5;124m'[39m[38;5;124mcoerce[39m[38;5;124m'[39m)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/core/groupby/generic.py:1951[0m, in [0;36mDataFrameGroupBy.__getitem__[0;34m(self, key)[0m
[1;32m   1944[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(key, [38;5;28mtuple[39m) [38;5;129;01mand[39;00m [38;5;28mlen[39m(key) [38;5;241m>[39m [38;5;241m1[39m:
[1;32m   1945[0m     [38;5;66;03m# if len == 1, then it becomes a SeriesGroupBy and this is actually[39;00m
[1;32m   1946[0m     [38;5;66;03m# valid syntax, so don't raise[39;00m
[1;32m   1947[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1948[0m         [38;5;124m"[39m[38;5;124mCannot subset columns with a tuple with more than one element. [39m[38;5;124m"[39m
[1;32m   1949[0m         [38;5;124m"[39m[38;5;124mUse a list instead.[39m[38;5;124m"[39m
[1;32m   1950[0m     )
[0;32m-> 1951[0m [38;5;28;01mreturn[39;00m [38;5;28msuper[39m()[38;5;241m.[39m[38;5;21m__getitem__[39m(key)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/core/base.py:244[0m, in [0;36mSelectionMixin.__getitem__[0;34m(self, key)[0m
[1;32m    242[0m [38;5;28;01melse[39;00m:
[1;32m    243[0m     [38;5;28;01mif[39;00m key [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mobj:
[0;32m--> 244[0m         [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mColumn not found: [39m[38;5;132;01m{[39;00mkey[38;5;132;01m}[39;00m[38;5;124m"[39m)
[1;32m    245[0m     ndim [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mobj[key][38;5;241m.[39mndim
[1;32m    246[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_gotitem(key, ndim[38;5;241m=[39mndim)

[0;31mKeyError[0m: 'Column not found: Y2021'

