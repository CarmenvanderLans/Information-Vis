Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.io as pio
from IPython.display import HTML, display

# Renderer voor inline weergave
pio.renderers.default = 'notebook'  # of 'jupyterlab'

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
# 1) DATA INLADEN & SAMENSTELLEN
# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
emissions_df  = pd.read_csv('Emissions_Agriculture_Energy_E_All_Data.csv', encoding='latin1')
production_df = pd.read_csv('Production_Crops_Livestock_E_All_Data.csv', encoding='latin1', low_memory=False)
gdp_df        = pd.read_csv('gdp-per-capita-worldbank.csv')
co2_df        = pd.read_csv('owid-co2-data.csv')

# COâ‚‚ 2021 per land (kt)
em2021 = (
    emissions_df
    .query("Item=='Total Energy' and Element=='Emissions (CO2)' and Unit=='kt'")
    [['Area','Y2021']]
    .rename(columns={'Area':'Land','Y2021':'CO2_uitstoot_kt'})
)
em2021['CO2_uitstoot_kt'] = pd.to_numeric(em2021['CO2_uitstoot_kt'], errors='coerce')

# Landbouwproductie 2021 (t â†’ ton)
prod2021 = (
    production_df
    .query("Element=='Production' and Unit=='t'")
    .groupby('Area')['Y2021'].sum()
    .reset_index()
    .rename(columns={'Area':'Land','Y2021':'Productie_ton'})
)
prod2021['Productie_ton'] = pd.to_numeric(prod2021['Productie_ton'], errors='coerce')

# BBP per hoofd 2021
gdp2021 = (
    gdp_df
    .query("Year==2021")
    .rename(columns={
        'Entity':'Land',
        'GDP per capita, PPP (constant 2021 international $)':'BBP_per_hoofd'
    })[['Land','BBP_per_hoofd']]
)
gdp2021['BBP_per_hoofd'] = pd.to_numeric(gdp2021['BBP_per_hoofd'], errors='coerce')

# Bevolking 2021
pop2021 = (
    co2_df
    .query("year==2021")
    [['country','population']]
    .rename(columns={'country':'Land','population':'Bevolking'})
)
pop2021['Bevolking'] = pd.to_numeric(pop2021['Bevolking'], errors='coerce')

# Merge & bereken CO2_per_ton
df = (
    em2021
    .merge(prod2021,  on='Land')
    .assign(
        CO2_per_ton=lambda d: d['CO2_uitstoot_kt']*1000/d['Productie_ton']
    )
    .merge(gdp2021,    on='Land')
    .merge(pop2021,    on='Land')
    .dropna()
)

# Selectie en vertaling
landen_map = {
    'Brazil':'BraziliÃ«','India':'India','Indonesia':'IndonesiÃ«',
    'Japan':'Japan','Nigeria':'Nigeria','South Africa':'Zuid-Afrika',
    'United States':'Verenigde Staten'
}
df_sel = df[df['Land'].isin(landen_map)].copy()
df_sel['land_naam'] = df_sel['Land'].map(landen_map)

# Normaliseren
cols = ['BBP_per_hoofd','CO2_per_ton','Productie_ton','Bevolking']
df_norm = df_sel.copy()
for c in cols:
    mn, mx = df_norm[c].min(), df_norm[c].max()
    df_norm[c] = (df_norm[c]-mn)/(mx-mn)

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
# 2) INTERACTIEVE RADAR CHART MET PLOTLY
# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
categories = cols
fig = go.Figure()

# Voeg per land Ã©Ã©n polar-plot
for i, row in df_norm.iterrows():
    vals = row[categories].tolist()
    vals += vals[:1]  # sluit de cirkel
    fig.add_trace(go.Scatterpolar(
        r=vals,
        theta=categories + [categories[0]],
        fill='toself',
        name=row['land_naam'],
        hovertemplate='<b>%{text}</b><br>' +
                      '%{theta}: %{r:.2f}<extra></extra>',
        text=[row['land_naam']]*len(vals)
    ))

fig.update_layout(
    polar=dict(
        radialaxis=dict(
            visible=True,
            range=[0,1],
            tickvals=[0,0.25,0.5,0.75,1]
        )
    ),
    title='Internationale vergelijking: BBP, uitstoot & landbouwproductie (genormaliseerd)',
    showlegend=True,
    legend=dict(title='Land')
)

# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
# 3) INLINE RENDEREN ZONDER HTML/JS TE TONEN
# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
html_snippet = fig.to_html(include_plotlyjs='cdn', full_html=False)
display(HTML(html_snippet))

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[1], line 14[0m
[1;32m     10[0m [38;5;66;03m# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[39;00m
[1;32m     11[0m [38;5;66;03m# 1) DATA INLADEN & SAMENSTELLEN[39;00m
[1;32m     12[0m [38;5;66;03m# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[39;00m
[1;32m     13[0m emissions_df  [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m'[39m[38;5;124mEmissions_Agriculture_Energy_E_All_Data.csv[39m[38;5;124m'[39m, encoding[38;5;241m=[39m[38;5;124m'[39m[38;5;124mlatin1[39m[38;5;124m'[39m)
[0;32m---> 14[0m production_df [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m'[39m[38;5;124mProduction_Crops_Livestock_E_All_Data.csv[39m[38;5;124m'[39m, encoding[38;5;241m=[39m[38;5;124m'[39m[38;5;124mlatin1[39m[38;5;124m'[39m, low_memory[38;5;241m=[39m[38;5;28;01mFalse[39;00m)
[1;32m     15[0m gdp_df        [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m'[39m[38;5;124mgdp-per-capita-worldbank.csv[39m[38;5;124m'[39m)
[1;32m     16[0m co2_df        [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m'[39m[38;5;124mowid-co2-data.csv[39m[38;5;124m'[39m)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1026[0m, in [0;36mread_csv[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[0m
[1;32m   1013[0m kwds_defaults [38;5;241m=[39m _refine_defaults_read(
[1;32m   1014[0m     dialect,
[1;32m   1015[0m     delimiter,
[0;32m   (...)[0m
[1;32m   1022[0m     dtype_backend[38;5;241m=[39mdtype_backend,
[1;32m   1023[0m )
[1;32m   1024[0m kwds[38;5;241m.[39mupdate(kwds_defaults)
[0;32m-> 1026[0m [38;5;28;01mreturn[39;00m _read(filepath_or_buffer, kwds)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:620[0m, in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    617[0m _validate_names(kwds[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mnames[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m))
[1;32m    619[0m [38;5;66;03m# Create the parser.[39;00m
[0;32m--> 620[0m parser [38;5;241m=[39m TextFileReader(filepath_or_buffer, [38;5;241m*[39m[38;5;241m*[39mkwds)
[1;32m    622[0m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[1;32m    623[0m     [38;5;28;01mreturn[39;00m parser

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1620[0m, in [0;36mTextFileReader.__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m   1617[0m     [38;5;28mself[39m[38;5;241m.[39moptions[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m] [38;5;241m=[39m kwds[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m]
[1;32m   1619[0m [38;5;28mself[39m[38;5;241m.[39mhandles: IOHandles [38;5;241m|[39m [38;5;28;01mNone[39;00m [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m-> 1620[0m [38;5;28mself[39m[38;5;241m.[39m_engine [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_make_engine(f, [38;5;28mself[39m[38;5;241m.[39mengine)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1880[0m, in [0;36mTextFileReader._make_engine[0;34m(self, f, engine)[0m
[1;32m   1878[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[1;32m   1879[0m         mode [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m
[0;32m-> 1880[0m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;241m=[39m get_handle(
[1;32m   1881[0m     f,
[1;32m   1882[0m     mode,
[1;32m   1883[0m     encoding[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mencoding[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1884[0m     compression[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mcompression[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1885[0m     memory_map[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mmemory_map[39m[38;5;124m"[39m, [38;5;28;01mFalse[39;00m),
[1;32m   1886[0m     is_text[38;5;241m=[39mis_text,
[1;32m   1887[0m     errors[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mencoding_errors[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mstrict[39m[38;5;124m"[39m),
[1;32m   1888[0m     storage_options[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mstorage_options[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1889[0m )
[1;32m   1890[0m [38;5;28;01massert[39;00m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[1;32m   1891[0m f [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mhandles[38;5;241m.[39mhandle

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/common.py:873[0m, in [0;36mget_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[1;32m    868[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[1;32m    869[0m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[1;32m    870[0m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[1;32m    871[0m     [38;5;28;01mif[39;00m ioargs[38;5;241m.[39mencoding [38;5;129;01mand[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs[38;5;241m.[39mmode:
[1;32m    872[0m         [38;5;66;03m# Encoding[39;00m
[0;32m--> 873[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(
[1;32m    874[0m             handle,
[1;32m    875[0m             ioargs[38;5;241m.[39mmode,
[1;32m    876[0m             encoding[38;5;241m=[39mioargs[38;5;241m.[39mencoding,
[1;32m    877[0m             errors[38;5;241m=[39merrors,
[1;32m    878[0m             newline[38;5;241m=[39m[38;5;124m"[39m[38;5;124m"[39m,
[1;32m    879[0m         )
[1;32m    880[0m     [38;5;28;01melse[39;00m:
[1;32m    881[0m         [38;5;66;03m# Binary mode[39;00m
[1;32m    882[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(handle, ioargs[38;5;241m.[39mmode)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'Production_Crops_Livestock_E_All_Data.csv'

