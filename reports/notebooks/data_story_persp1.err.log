Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.graph_objects as go

# Data inladen
emissies = pd.read_csv("FAOSTAT_landbouw_emissies_2022.csv")
productie = pd.read_csv("FAOSTAT_landbouw_productie_2022.csv")
epi      = pd.read_csv("epi2022results05302022.csv")

# Emissies per land (in kiloton)
emissie_per_land = emissies.groupby("Area")["Value"].sum().reset_index()
emissie_per_land.columns = ["Country", "Emissions_kt"]

# Productie per land (in ton omzetten naar kiloton)
productie_per_land = productie.groupby("Area")["Value"].sum().reset_index()
productie_per_land.columns = ["Country", "Production_ton"]
productie_per_land["Production_kt"] = productie_per_land["Production_ton"] / 1000

# Combineren en uitstoot per ton berekenen
combined = pd.merge(emissie_per_land, productie_per_land, on="Country")
combined["Emissions_per_ton"] = combined["Emissions_kt"] / combined["Production_kt"]

# EPI-score koppelen
epi = epi.rename(columns={"country": "Country", "EPI.new": "EPI_Score"})
final = pd.merge(combined, epi[["Country", "EPI_Score"]], on="Country")

# Filter landen met voldoende landbouwactiviteit
final = final[(final["Production_kt"] > 5000) & (final["Emissions_kt"] > 50)]

# Percentielen voor kleurcontrast
p10 = final["Emissions_per_ton"].quantile(0.10)
p90 = final["Emissions_per_ton"].quantile(0.90)

# Achtergrondkaart: EPI-score
choropleth = go.Choropleth(
    locations=final["Country"],
    locationmode="country names",
    z=final["EPI_Score"],
    colorscale="YlGn",
    zmin=0,
    zmax=100,
    showscale=True,
    colorbar=dict(
        title="EPI Score",
        x=1.01,
        len=0.6
    )
)

# Puntenkaart: COâ‚‚-uitstoot per ton landbouwproductie
scatter = go.Scattergeo(
    locationmode='country names',
    locations=final["Country"],
    text=final["Country"],
    marker=dict(
        size=5,
        color=final["Emissions_per_ton"],
        colorscale=["#ffffcc", "#ffcc66", "#ff9933", "#cc3300", "#660000"],
        cmin=p10,
        cmax=p90,
        colorbar=dict(
            title=None,
            orientation='h',
            x=0.5,
            xanchor="center",
            y=-0.2,
            yanchor="bottom",
            len=1.0,
            thickness=15,
            tickangle=0,
            tickvals=[
                round(p10, 3),
                round((p10 + p90) / 2, 3),
                round(p90, 3)
            ]
        )
    ),
    name="Uitstoot per ton"
)

# Visualisatie samenstellen
fig = go.Figure(data=[choropleth, scatter])
fig.update_layout(
    title="COâ‚‚-uitstoot per ton landbouwproductie en milieubeleid (EPI-score) per land (2022)",
    title_font=dict(size=16),
    geo=dict(
        showframe=False,
        showcoastlines=True,
        projection_type='equirectangular',
        projection_scale=1.3,
        center=dict(lat=10, lon=10)
    ),
    height=710,
    width=1100,
    margin=dict(t=60, b=220, r=60, l=60),
    annotations=[
        # Titel boven de kleurenschaal
        dict(
            text="COâ‚‚-uitstoot per ton landbouwproductie",
            showarrow=False,
            xref='paper',
            yref='paper',
            x=0.5,
            y=-0.15,
            xanchor='center',
            yanchor='bottom',
            font=dict(size=13)
        ),
    ]
)

fig.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[1], line 5[0m
[1;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mplotly[39;00m[38;5;21;01m.[39;00m[38;5;21;01mgraph_objects[39;00m [38;5;28;01mas[39;00m [38;5;21;01mgo[39;00m
[1;32m      4[0m [38;5;66;03m# Data inladen[39;00m
[0;32m----> 5[0m emissies [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m"[39m[38;5;124mFAOSTAT_landbouw_emissies_2022.csv[39m[38;5;124m"[39m)
[1;32m      6[0m productie [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m"[39m[38;5;124mFAOSTAT_landbouw_productie_2022.csv[39m[38;5;124m"[39m)
[1;32m      7[0m epi      [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m"[39m[38;5;124mepi2022results05302022.csv[39m[38;5;124m"[39m)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1026[0m, in [0;36mread_csv[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[0m
[1;32m   1013[0m kwds_defaults [38;5;241m=[39m _refine_defaults_read(
[1;32m   1014[0m     dialect,
[1;32m   1015[0m     delimiter,
[0;32m   (...)[0m
[1;32m   1022[0m     dtype_backend[38;5;241m=[39mdtype_backend,
[1;32m   1023[0m )
[1;32m   1024[0m kwds[38;5;241m.[39mupdate(kwds_defaults)
[0;32m-> 1026[0m [38;5;28;01mreturn[39;00m _read(filepath_or_buffer, kwds)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:620[0m, in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    617[0m _validate_names(kwds[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mnames[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m))
[1;32m    619[0m [38;5;66;03m# Create the parser.[39;00m
[0;32m--> 620[0m parser [38;5;241m=[39m TextFileReader(filepath_or_buffer, [38;5;241m*[39m[38;5;241m*[39mkwds)
[1;32m    622[0m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[1;32m    623[0m     [38;5;28;01mreturn[39;00m parser

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1620[0m, in [0;36mTextFileReader.__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m   1617[0m     [38;5;28mself[39m[38;5;241m.[39moptions[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m] [38;5;241m=[39m kwds[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m]
[1;32m   1619[0m [38;5;28mself[39m[38;5;241m.[39mhandles: IOHandles [38;5;241m|[39m [38;5;28;01mNone[39;00m [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m-> 1620[0m [38;5;28mself[39m[38;5;241m.[39m_engine [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_make_engine(f, [38;5;28mself[39m[38;5;241m.[39mengine)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1880[0m, in [0;36mTextFileReader._make_engine[0;34m(self, f, engine)[0m
[1;32m   1878[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[1;32m   1879[0m         mode [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m
[0;32m-> 1880[0m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;241m=[39m get_handle(
[1;32m   1881[0m     f,
[1;32m   1882[0m     mode,
[1;32m   1883[0m     encoding[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mencoding[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1884[0m     compression[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mcompression[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1885[0m     memory_map[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mmemory_map[39m[38;5;124m"[39m, [38;5;28;01mFalse[39;00m),
[1;32m   1886[0m     is_text[38;5;241m=[39mis_text,
[1;32m   1887[0m     errors[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mencoding_errors[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mstrict[39m[38;5;124m"[39m),
[1;32m   1888[0m     storage_options[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mstorage_options[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1889[0m )
[1;32m   1890[0m [38;5;28;01massert[39;00m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[1;32m   1891[0m f [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mhandles[38;5;241m.[39mhandle

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/common.py:873[0m, in [0;36mget_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[1;32m    868[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[1;32m    869[0m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[1;32m    870[0m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[1;32m    871[0m     [38;5;28;01mif[39;00m ioargs[38;5;241m.[39mencoding [38;5;129;01mand[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs[38;5;241m.[39mmode:
[1;32m    872[0m         [38;5;66;03m# Encoding[39;00m
[0;32m--> 873[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(
[1;32m    874[0m             handle,
[1;32m    875[0m             ioargs[38;5;241m.[39mmode,
[1;32m    876[0m             encoding[38;5;241m=[39mioargs[38;5;241m.[39mencoding,
[1;32m    877[0m             errors[38;5;241m=[39merrors,
[1;32m    878[0m             newline[38;5;241m=[39m[38;5;124m"[39m[38;5;124m"[39m,
[1;32m    879[0m         )
[1;32m    880[0m     [38;5;28;01melse[39;00m:
[1;32m    881[0m         [38;5;66;03m# Binary mode[39;00m
[1;32m    882[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(handle, ioargs[38;5;241m.[39mmode)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'FAOSTAT_landbouw_emissies_2022.csv'

