Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.io as pio
pio.renderers.default = "vscode"

# ==== MANUELE SPACING INSTELLEN ====
row_heights        = [0.25, 0.45, 0.30]
vertical_spacing   = 0.08
subplot_title_pad  = 20
top_margin         = 180
title_pad_top      = 30

# ==== COLOUR PANEL ====
colours = {
    'background':        '#FFFFFF',
    'font':              '#000000',
    'grid':              '#444444',
    'emissions_bar':     '#6094AA',
    'emissions_outline': '#000000',
    'production_bar':    "#65B1C5",
    'polar_bg':          '#FFFFFF',
    'precip_fill':       '#83CFE5',
    'precip_outline':    '#000000',
    'temp_line':         '#CA4A4A',
    'temp_marker':       '#CA4A4A'
}

# ==== NAME MAPPING ====
name_map = {
    'Netherlands (Kingdom of the)': 'Netherlands',
    'United States of America':      'United States'
}

# ==== DUTCH TRANSLATIONS ====
dutch_country_names = {
    'Brazil': 'Brazilië',
    'Netherlands': 'Nederland',
    'United States': 'Verenigde Staten',
    'Kenya': 'Kenia'
}

dutch_month_names = {
    'Jan': 'Jan','Feb': 'Feb','Mar': 'Maa','Apr': 'Apr',
    'May': 'Mei','Jun': 'Jun','Jul': 'Jul','Aug': 'Aug',
    'Sep': 'Sep','Oct': 'Okt','Nov': 'Nov','Dec': 'Dec'
}

dutch_category_names = {
    'Fruits': 'Fruit',
    'Vegetables': 'Groenten',
    'Grains & Cereals': 'Granen en Ceralia',
    'Oil Crops': 'Oliegewassen',
    'Livestock & Animal Products': 'Vee en Dierlijke Producten',
    'Sugar cane': 'Suikerriet',
    'Cotton': 'Katoen',
    'Rubber': 'Rubber',
    'Silk': 'Zijde',
    'Jute/Hemp': 'Jute/Hennep'
}

# ==== CATEGORY MAP ====
category_map = {
    'Apples':'Fruits','Bananas':'Fruits','Oranges':'Fruits','Pineapples':'Fruits',
    'Mangoes, mangosteens, guavas':'Fruits','Papayas':'Fruits','Watermelons':'Fruits',
    'Grapes':'Fruits','Lemons and limes':'Fruits','Tangerines, mandarins, clementines':'Fruits',
    'Cantaloupes and other melons':'Fruits','Pears':'Fruits','Peaches and nectarines':'Fruits',
    'Avocados':'Fruits','Strawberries':'Fruits','Plums and sloes':'Fruits','Cherries':'Fruits',
    'Pomegranates':'Fruits','Pomelos and grapefruits':'Fruits','Figs':'Fruits','Persimmons':'Fruits',
    'Currants':'Fruits','Sour cherries':'Fruits','Olives':'Fruits',
    'Plantains and cooking bananas':'Fruits','Cranberries':'Fruits',
    'Tomatoes':'Vegetables','Onions, dry':'Vegetables','Cabbages':'Vegetables',
    'Carrots and turnips':'Vegetables','Lettuce and chicory':'Vegetables','Spinach':'Vegetables',
    'Cauliflowers and broccoli':'Vegetables','Cucumbers and gherkins':'Vegetables',
    'Pumpkins, squash and gourds':'Vegetables','Garlic':'Vegetables',
    'Leeks, other alliaceous vegetables':'Vegetables','Mushrooms and truffles':'Vegetables',
    'Eggplants (aubergines)':'Vegetables','Peas, green':'Vegetables',
    'Artichokes':'Vegetables','Asparagus':'Vegetables',
    'Wheat':'Grains & Cereals','Maize':'Grains & Cereals','Rice, paddy':'Grains & Cereals',
    'Barley':'Grains & Cereals','Sorghum':'Grains & Cereals','Millet':'Grains & Cereals',
    'Oats':'Grains & Cereals','Rye':'Grains & Cereals','Triticale':'Grains & Cereals',
    'Quinoa':'Grains & Cereals','Canary seed':'Grains & Cereals','Cereals n.e.c.':'Grains & Cereals',
    'Soybeans':'Oil Crops','Rapeseed':'Oil Crops','Sunflower seed':'Oil Crops','Oil palm fruit':'Oil Crops',
    'Groundnuts, in shell':'Oil Crops','Sesame seed':'Oil Crops','Safflower seed':'Oil Crops',
    'Mustard seed':'Oil Crops','Flaxseed':'Oil Crops','Hempseed':'Oil Crops','Linseed':'Oil Crops',
    'Palm kernels':'Oil Crops','Castor oil seeds':'Oil Crops',
    'Cattle':'Livestock & Animal Products','Buffalo':'Livestock & Animal Products','Sheep':'Livestock & Animal Products',
    'Goats':'Livestock & Animal Products','Chickens':'Livestock & Animal Products','Ducks':'Livestock & Animal Products',
    'Turkeys':'Livestock & Animal Products','Geese and guinea fowls':'Livestock & Animal Products',
    'Pigeons, other birds':'Livestock & Animal Products','Rabbits and hares':'Livestock & Animal Products',
    'Camels':'Livestock & Animal Products','Horses':'Livestock & Animal Products','Mules':'Livestock & Animal Products',
    'Hen eggs, in shell':'Livestock & Animal Products','Raw milk of cattle':'Livestock & Animal Products',
    'Raw milk of buffalo':'Livestock & Animal Products','Raw milk of sheep':'Livestock & Animal Products',
    'Raw milk of goats':'Livestock & Animal Products','Honey':'Livestock & Animal Products',
    'Livestock fat':'Livestock & Animal Products','Meat':'Livestock & Animal Products',
    'Sugar cane':'Sugar cane',
    'Cotton lint':'Cotton','Cottonseed':'Cotton',
    'Rubber, natural':'Rubber','Natural rubber in primary forms':'Rubber',
    'Silk-worm cocoons, reelable':'Silk','Raw silk (not thrown)':'Silk',
    'Jute, raw or retted':'Jute/Hemp','True hemp, raw or retted':'Jute/Hemp',
    'Ramie, raw or retted':'Jute/Hemp','Kenaf, and other textile bast fibres, raw or retted':'Jute/Hemp',
    'Sisal, raw':'Jute/Hemp','Coir, raw':'Jute/Hemp','Kapok fibre, raw':'Jute/Hemp'
}

# ==== 1) LOAD & PREP ====
prod = pd.read_csv('datasets/FAOSTAT_production_arg3.csv')
prod['Country'] = prod['Area'].replace(name_map)
prod['Category'] = prod['Item'].map(category_map)
prod_df = prod.query("Element=='Production' & Year==2022 & Unit=='t'").dropna(subset=['Category'])
grouped_prod = prod_df.groupby(['Country','Category'])['Value'].sum().reset_index()

# ==== 2) EMISSIONS ====
em  = pd.read_csv('datasets/FAOSTAT_data_en_6-26-2025-6.csv')
pop = pd.read_csv('datasets/API_SP.POP.TOTL_DS2_en_csv_v2_124794.csv', skiprows=4)
em['Area'] = em['Area'].replace(name_map)
pop['Country Name'] = pop['Country Name'].replace(name_map)

countries = ['Brazil','Netherlands','United States','Kenya']
em2    = em.query("Year==2022 and Area in @countries")
em_tot = em2.groupby('Area')['Value'].sum().reset_index().rename(columns={'Area':'Country','Value':'Total_Emissions'})
pop2   = pop[['Country Name','2022']].rename(columns={'Country Name':'Country','2022':'Population'})
merged_em = pd.merge(em_tot, pop2, on='Country')
merged_em['Emissions_per_capita'] = merged_em['Total_Emissions'] / merged_em['Population']

# ==== 3) TEMP & PRECIP ====
tp = pd.read_csv('datasets/combined_2022.csv')
tp['name'] = tp['name'].replace({'United States of America':'United States'})
tp = tp[tp['name'].isin(countries)]
tp['Month']     = pd.to_datetime(tp['Month'], format='%Y-%m')
tp['Month_str'] = tp['Month'].dt.strftime('%b').map(dutch_month_names)
month_order     = tp.sort_values('Month')['Month_str'].unique()
y_temp_min, y_temp_max = tp['Temperature'].min(), tp['Temperature'].max()

# ==== GRAPH TITLES ====
graph_titles = [
    "CO₂-uitstoot per hoofd van de bevolking (2022)",
    "Landbouwproductie per categorie (2022)",
    "Maandelijkse temperatuur en neerslag (2022)"
]

# ==== BUILD FIGURE ====
fig = make_subplots(
    rows=3, cols=1,
    specs=[[{'type':'xy'}],[{'type':'polar'}],[{'type':'xy','secondary_y':True}]],
    row_heights=row_heights,
    vertical_spacing=vertical_spacing,
    subplot_titles=("Grafiek 1","Grafiek 2","Grafiek 3")
)

categories       = sorted(grouped_prod['Category'].unique())
dutch_categories = [dutch_category_names.get(cat,cat) for cat in categories]
angles           = np.linspace(0, 360, len(categories), endpoint=False)

for i, country in enumerate(countries):
    val = merged_em.loc[merged_em['Country']==country, 'Emissions_per_capita'].iat[0]
    fig.add_trace(go.Bar(
        x=[dutch_country_names[country]], y=[val],
        marker=dict(color=colours['emissions_bar'],
                    line=dict(color=colours['emissions_outline'], width=2)),
        visible=(i==0)
    ), row=1, col=1)

    dfp = (grouped_prod.query("Country==@country")
           .set_index('Category').reindex(categories).reset_index())
    fig.add_trace(go.Barpolar(
        r=dfp['Value'],
        theta=[angles[categories.index(c)] for c in dfp['Category']],
        width=[360/len(categories)*0.8]*len(categories),
        marker_color=colours['production_bar'],
        visible=(i==0)
    ), row=2, col=1)

    dft = tp[tp['name']==country]
    fig.add_trace(go.Bar(
        x=dft['Month_str'], y=dft['Precipitation'],
        marker=dict(color=colours['precip_fill'],
                    line=dict(color=colours['precip_outline'], width=1)),
        opacity=0.7, visible=(i==0)
    ), row=3, col=1, secondary_y=True)

    fig.add_trace(go.Scatter(
        x=dft['Month_str'], y=dft['Temperature'],
        mode='lines+markers',
        line=dict(color=colours['temp_line']),
        marker=dict(color=colours['temp_marker']),
        visible=(i==0)
    ), row=3, col=1, secondary_y=False)

buttons = []
for idx, country in enumerate(countries):
    vis = [False]*len(fig.data)
    for j in range(4):
        vis[4*idx + j] = True
    buttons.append(dict(
        label=dutch_country_names[country],
        method='update',
        args=[{'visible': vis}, {}]
    ))

fig.update_layout(
    updatemenus=[dict(
        active=0,
        buttons=buttons,
        x=0.1, y=1.38, xanchor='left', yanchor='top',
        direction='down',
        pad=dict(l=10, r=10, t=10, b=10),   # <-- hier de padding instellen
        font=dict(size=16)                   # <-- hier de lettergrootte (en dus dropdown-grootte)
    )],
    margin=dict(l=50, r=50, t=top_margin, b=50),
    plot_bgcolor=colours['background'],
    paper_bgcolor=colours['background'],
    font=dict(color=colours['font']),
    showlegend=False,
    width=700,
    height=1350,
    polar=dict(bgcolor=colours['polar_bg'])
)

fig.add_annotation(
    text=(
        "Alle indicatoren per land<br>"
        "Grafiek 1: CO₂-uitstoot per hoofd van de bevolking (2022)<br>"
        "Grafiek 2: Landbouwproductie per categorie (2022)<br>"
        "Grafiek 3: Maandelijkse temperatuur en neerslag (2022)"
    ),
    xref="paper", yref="paper",
    x=0.5, y=1.2,
    showarrow=False,
    font=dict(size=16),
    align="center"
)

for ann in fig.layout.annotations:
    ann.yshift = -subplot_title_pad

fig.update_yaxes(row=1, col=1,
    range=[0,2], dtick=0.5,
    showgrid=True, gridcolor=colours['grid']
)
fig.update_layout(polar=dict(
    radialaxis=dict(showgrid=True, gridcolor=colours['grid']),
    angularaxis=dict(showgrid=True, gridcolor=colours['grid'],
                     tickvals=angles, ticktext=dutch_categories)
))
fig.update_xaxes(row=3, col=1,
    type='category',
    categoryorder='array',
    categoryarray=month_order,
    showgrid=True, gridcolor=colours['grid']
)
fig.update_yaxes(row=3, col=1, secondary_y=False,
    range=[y_temp_min,y_temp_max], dtick=5,
    showgrid=True, gridcolor=colours['grid']
)
fig.update_yaxes(row=3, col=1, secondary_y=True, showgrid=False)

fig.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[3], line 107[0m
[1;32m     64[0m category_map [38;5;241m=[39m {
[1;32m     65[0m     [38;5;124m'[39m[38;5;124mApples[39m[38;5;124m'[39m:[38;5;124m'[39m[38;5;124mFruits[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mBananas[39m[38;5;124m'[39m:[38;5;124m'[39m[38;5;124mFruits[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mOranges[39m[38;5;124m'[39m:[38;5;124m'[39m[38;5;124mFruits[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mPineapples[39m[38;5;124m'[39m:[38;5;124m'[39m[38;5;124mFruits[39m[38;5;124m'[39m,
[1;32m     66[0m     [38;5;124m'[39m[38;5;124mMangoes, mangosteens, guavas[39m[38;5;124m'[39m:[38;5;124m'[39m[38;5;124mFruits[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mPapayas[39m[38;5;124m'[39m:[38;5;124m'[39m[38;5;124mFruits[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mWatermelons[39m[38;5;124m'[39m:[38;5;124m'[39m[38;5;124mFruits[39m[38;5;124m'[39m,
[0;32m   (...)[0m
[1;32m    103[0m     [38;5;124m'[39m[38;5;124mSisal, raw[39m[38;5;124m'[39m:[38;5;124m'[39m[38;5;124mJute/Hemp[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mCoir, raw[39m[38;5;124m'[39m:[38;5;124m'[39m[38;5;124mJute/Hemp[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mKapok fibre, raw[39m[38;5;124m'[39m:[38;5;124m'[39m[38;5;124mJute/Hemp[39m[38;5;124m'[39m
[1;32m    104[0m }
[1;32m    106[0m [38;5;66;03m# ==== 1) LOAD & PREP ====[39;00m
[0;32m--> 107[0m prod [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m'[39m[38;5;124mdatasets/FAOSTAT_production_arg3.csv[39m[38;5;124m'[39m)
[1;32m    108[0m prod[[38;5;124m'[39m[38;5;124mCountry[39m[38;5;124m'[39m] [38;5;241m=[39m prod[[38;5;124m'[39m[38;5;124mArea[39m[38;5;124m'[39m][38;5;241m.[39mreplace(name_map)
[1;32m    109[0m prod[[38;5;124m'[39m[38;5;124mCategory[39m[38;5;124m'[39m] [38;5;241m=[39m prod[[38;5;124m'[39m[38;5;124mItem[39m[38;5;124m'[39m][38;5;241m.[39mmap(category_map)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1026[0m, in [0;36mread_csv[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[0m
[1;32m   1013[0m kwds_defaults [38;5;241m=[39m _refine_defaults_read(
[1;32m   1014[0m     dialect,
[1;32m   1015[0m     delimiter,
[0;32m   (...)[0m
[1;32m   1022[0m     dtype_backend[38;5;241m=[39mdtype_backend,
[1;32m   1023[0m )
[1;32m   1024[0m kwds[38;5;241m.[39mupdate(kwds_defaults)
[0;32m-> 1026[0m [38;5;28;01mreturn[39;00m _read(filepath_or_buffer, kwds)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:620[0m, in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    617[0m _validate_names(kwds[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mnames[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m))
[1;32m    619[0m [38;5;66;03m# Create the parser.[39;00m
[0;32m--> 620[0m parser [38;5;241m=[39m TextFileReader(filepath_or_buffer, [38;5;241m*[39m[38;5;241m*[39mkwds)
[1;32m    622[0m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[1;32m    623[0m     [38;5;28;01mreturn[39;00m parser

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1620[0m, in [0;36mTextFileReader.__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m   1617[0m     [38;5;28mself[39m[38;5;241m.[39moptions[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m] [38;5;241m=[39m kwds[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m]
[1;32m   1619[0m [38;5;28mself[39m[38;5;241m.[39mhandles: IOHandles [38;5;241m|[39m [38;5;28;01mNone[39;00m [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m-> 1620[0m [38;5;28mself[39m[38;5;241m.[39m_engine [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_make_engine(f, [38;5;28mself[39m[38;5;241m.[39mengine)

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1880[0m, in [0;36mTextFileReader._make_engine[0;34m(self, f, engine)[0m
[1;32m   1878[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[1;32m   1879[0m         mode [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m
[0;32m-> 1880[0m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;241m=[39m get_handle(
[1;32m   1881[0m     f,
[1;32m   1882[0m     mode,
[1;32m   1883[0m     encoding[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mencoding[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1884[0m     compression[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mcompression[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1885[0m     memory_map[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mmemory_map[39m[38;5;124m"[39m, [38;5;28;01mFalse[39;00m),
[1;32m   1886[0m     is_text[38;5;241m=[39mis_text,
[1;32m   1887[0m     errors[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mencoding_errors[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mstrict[39m[38;5;124m"[39m),
[1;32m   1888[0m     storage_options[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mstorage_options[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1889[0m )
[1;32m   1890[0m [38;5;28;01massert[39;00m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[1;32m   1891[0m f [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mhandles[38;5;241m.[39mhandle

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pandas/io/common.py:873[0m, in [0;36mget_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[1;32m    868[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[1;32m    869[0m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[1;32m    870[0m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[1;32m    871[0m     [38;5;28;01mif[39;00m ioargs[38;5;241m.[39mencoding [38;5;129;01mand[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs[38;5;241m.[39mmode:
[1;32m    872[0m         [38;5;66;03m# Encoding[39;00m
[0;32m--> 873[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(
[1;32m    874[0m             handle,
[1;32m    875[0m             ioargs[38;5;241m.[39mmode,
[1;32m    876[0m             encoding[38;5;241m=[39mioargs[38;5;241m.[39mencoding,
[1;32m    877[0m             errors[38;5;241m=[39merrors,
[1;32m    878[0m             newline[38;5;241m=[39m[38;5;124m"[39m[38;5;124m"[39m,
[1;32m    879[0m         )
[1;32m    880[0m     [38;5;28;01melse[39;00m:
[1;32m    881[0m         [38;5;66;03m# Binary mode[39;00m
[1;32m    882[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(handle, ioargs[38;5;241m.[39mmode)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'datasets/FAOSTAT_production_arg3.csv'

